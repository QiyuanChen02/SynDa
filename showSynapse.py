from fetchPoints import fetchPoints
from findNeighbours import findNeighbours
from obtainSynapse import validateSynapses, getSynapse
from PIL import Image
from filterPoints import filterPoints
from interactiveVisualisation import interactiveVisualisation
from outputExcel import outputExcel
from generateGrids import generateGrids
from dimensions import getGridDimensions
from thresholds import (
    gridsize,
    colourThreshold,
    distanceThreshold,
    prePostDistanceLowerThreshold,
    prePostDistanceUpperThreshold,
)

"""This is the densityAnalyser code, which extracts the coordinates from the create excel file (the slightly modified version of the excel file generated by CellProfiler)
to create a density map, as well as a scatter plot of the synapses, then generates an interactive image.

The basic idea behind the density map is to create a 2D array of zeros representing the density, and then for every synapse center, use the coordinates of the synapse to increase the value of the square in the 2D array where the synapse is located.
Finally the array is converted into an image, where the color of the square is determined by the value of the square in the array.

To run this code you will need to install the following libraries: pandas, pillow, matplotlib and mplcursors.
Also make sure to change the file name on line 120 to the path of the excel file you want to use, and possibly the indexed on line 35 if you change the location of columns in the excel file."""

preSynapseData = fetchPoints("input/Homer for Q 1.csv")
postSynapseData = fetchPoints("input/Syt for Q 2.csv")
maxX, minX, maxY, minY, *_ = getGridDimensions(
    gridsize, preSynapseData + postSynapseData
)
filteredPreSynapseData = filterPoints(
    preSynapseData,
    "input/synapses.png",
    maxX - minX,
    maxY - minY,
    "red",
    colourThreshold,
    distanceThreshold,
)
filteredPostSynapseData = filterPoints(
    postSynapseData,
    "input/synapses.png",
    maxX - minX,
    maxY - minY,
    "green",
    colourThreshold,
    distanceThreshold,
)

# Finds closest neighbours for all the post synapses
closestNeighbours, closestNeighbourDistance = findNeighbours(
    filteredPreSynapseData, filteredPostSynapseData
)

synapses = getSynapse(
    filteredPreSynapseData,
    filteredPostSynapseData,
    closestNeighbours,
    closestNeighbourDistance,
)

isValidSynapse, validSynapses = validateSynapses(
    synapses,
    closestNeighbours,
    closestNeighbourDistance,
    filteredPreSynapseData,
    filteredPostSynapseData,
    prePostDistanceLowerThreshold,
    prePostDistanceUpperThreshold,
)

outputExcel(
    filteredPostSynapseData,
    closestNeighbours,
    closestNeighbourDistance,
    synapses,
    isValidSynapse,
)

gridSynapses = generateGrids(
    validSynapses, gridsize, minX, minY, maxX, maxY, isSynapse=True
)

inputImage = Image.open("input/synapses.png")
resizedImage = inputImage.resize((round(maxX - minX), round(maxY - minY)))

interactiveVisualisation(validSynapses, resizedImage)
